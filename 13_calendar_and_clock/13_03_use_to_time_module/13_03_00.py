# timeモジュールの使い方
"""
Pythonは、timeオブジェクトを持つdatetimeモジュールの他に、全く別のtimeモジュールを持つ。
timeモジュールには、紛らわしい関数があるtime()である。

絶対的な時刻を表現するための1つの方法として考えられるのは、何らか出発点から秒数をひたすら数えるというものである。
Unix時間は、1970年1月1日0時からの秒数を使っている(Unixが生まれた時とほぼ重なっている)。
この値はよくエポックと呼ばれる。これは、システムの愛で日時を交換するための方法としてもっとも簡単な場合が多い。
timeモジュールのtime()は、Unix時間で表現した現在の時刻を返す。
"""
import time
now = time.time()
print(now)

"""
1970年の正月からはもう10億秒以上が経過していることがわかる。時間はどこにいったのだろうか。
ctime()を使えば、Unix時間を文字列に変換できる。
"""
print(time.ctime(now))

"""
Unix時間は、JavaScriptなど、ほかのシステムと日付、時刻データを交換するときの共通表現として使える。
しかし、実際の日、時間などの値が必要な時もある。timeは、struct_timeオブジェクトとしてこれらの値を提供する。
localtime()は、システムの標準時での日時を返す。gmtimeはUTCでの日時を返す。
"""
print(time.localtime(now))
print(time.gmtime(now))

"""
localtime(), gmtime()に引数を与えなければ、現在の時刻が返される。
struct_timeのtm_...の値の中にはあいまいなものがある。
以下にstruct_timeの値一覧を示す。

インデックス    :   名前        :    意味    :   値の範囲
0              :    tm_year     :   年      :   0000~9999
1              :    tm_mom      :   月      :   1~12
2              :    tm_mday     :   日      :   1~31
3              :    tm_hour     :   時      :   0~23
4              :    tm_min      :   分      :   0~59
5              :    tm_sec      :   秒      :   0~59
6              :    tm_wday     :   曜日    :   0(月曜)~6(日曜) 
7              :    tm_yday     :   通日    :   1~366
8              :    tm_isdsy    :   サマータイム?   :   0=no, 1=yes, -1=不明

struct_timeは名前付きタプルのように振舞うため、上の表のインデックスが使える。
"""
now = time.localtime()
print(now)
print(now[0])

"mktime()はstruct_timeオブジェクトをUnix時間に変換する。"
tm = time.localtime(now)
print(time.mktime(tm))

"struct_timeオブジェクトは、秒単位までしか管理していないので、now()とは正確に一致しない。"

"""
可能なら、各地の標準時ではなく、UTCを使うべきだ。UTCは、標準時間チアに依存しない絶対時間である。サーバを持っている場合は、
時刻としてUTCを設定し、地域の標準時を使わないようにする。
さらに避けれるなら、サマータイムは使わないことだ。サマータイムを使うと、年に一度1時間が消え去り(spring ahead。春に時計を1時間先に進めること)、
別の時には、1時間が2回起こる(fall back。秋に1時間時計を遅らせること)。どういうわけか、多くの起業はコンピュータシステムでサマータイムを使っており、
毎年謎のデータ重複とデータ消失に悩まされている。
"""
