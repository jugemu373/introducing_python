# 正規表現
"""
正規表現機能は、標準ライブラリのreモジュールによって提供されている。ソース文字列にパターン文字列をマッチさせるので、この2つを定義する。
簡単なパターンマッチを以下に示す。
"""
import re
result = re.match(r'You', 'Young Frankenstein')

"""
より複雑なマッチでは、先にパターンをコンパイルして、後で行うことでマッチングのスピードを上げることができる。
"""
youpattern = re.compile(r'You')
result = youpattern.match('Young Frankenstein')

"""
match()はソースの先頭がパターンにマッチするかどうかをチェックするだけある。ソースの任意の位置でパターンを探すのはsearch()である。
"""

"""
パターンとソースを比較する方法はmatch()だけではない。他にも次のようなメソッドを使える

・search()は、最初のマッチを返す(ある場合)。
・findall()は、重なりあわないすべてのマッチのリストを返す(ある場合)。
・split()は、パターンにマッチしたところでソースを分割し、部分文字列のリストを返す。
・sub()は、置換文字列引数を取り、ソースのうち、パターンにマッチするすべての部分を置換文字列に置き換える。

ここで示す正規表現の大変はASCIIを使っているが、Pythonの文字列関数は、正規表現も含めて、任意のPython文字列、任意のUnicode文字をサポートしている。
"""
