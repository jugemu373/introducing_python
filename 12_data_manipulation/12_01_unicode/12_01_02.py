# UTF-8

# 通常の文字列処理をしているときには、Pythonが個々のUnicode文字をどのように格納しているかを気にする必要はない。
# しかし、Pythonの外の世界との間でデータをやり取りするときには、次の2つのものが必要になる。

# ・文字列をバイト列にエンコード(符号化)するする手段
# ・バイト列を文字列にデコード(複合化)する手段

# Unicodeが65,536文字よりも少なければ、個々のUnicode文字IDを2バイトに格納できたところだが、実際にはもっと多い。
# 4バイトあればすべてのIDをエンコードできるが、それではごく普通の文字列のためにメモリやディスクで必要な容量が3~4倍に増えてしまう。
# Ken Thompson, Rob Pikeといえば、Unixプログラマにはなじみのある名前だろう。動的エンコード方式のUTF-8は、ある晩彼らが
# ニュージャージーの食堂の一角で設計したものである。UTF-8は、個々のUnicode文字の為に1バイトから4バイト使っている。

#   ASCIIは1バイト
#   ほとんどのラテン字系言語には2バイト(ただしキリル文字は除く)
#   基本多言語面のその他については3バイト
#   一部のアジアの言語、記号を含むその他については4バイト

# UTF-8は、Python, Linux, HTMLでは標準的なテキストエンコーディングであり、高速、完全で非常によく機能している。
# コード全体を通じてTF-8エンコーディングを使うなら、さまざまなエンコーディングの間を行き来するよりもはるかに仕事が楽になる。

# ウェブページなどのの他のソースからコピーアンドペーストでPython文字列を作るときには、ソースがUTF-8形式でエンコードされていることを
# 確かめなければならない。Latin-1やWindows 1252でエンコードされたテキストをPython文字列にコピーしている例は非常に多い。
# すると、あとで無効なバイトシーケンスだとして、例外が発生することになる。

