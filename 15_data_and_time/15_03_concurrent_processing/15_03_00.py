# 並行処理
"""
Pythonの公式サイトでは、並行処理全般と並行処理をサポートする標準標準ライブラリを
取り上げている。これらのページには、さまざまなパッケージ、テクニックに対する
リンクが多数含まれている。この章では、もっとも役に立つものを紹介する。
コンピュータが何かを待つときの理由は、次のうちのどちらかだ。

    I/Oバウンド
        I/O処理待ち。こちらの方が圧倒的に多い。コンピュータのCPUはあきれるほどに
        高速だ。メモリの数百倍高速で、ディスクやネットワークの数千、数万倍も
        高速である。
    
    CPUバウンド
        CPU待ち。科学計算やグラフィックス関連の計算など、数値処理を実行している
        ときに起きる。
    
並行処理に関連する用語をあと2つ紹介する。

    同期的
        順番に続いていくこと。
    
    非同期的
        タスクが独立していること。

単純なシステムやタスクから現実の問題解決に進むと、どこかの時点で並行処理を
相手にしなければならなくなる。例えば、ウェブサイトについて考えてみよう。
通常なら、非常にすばやくウェブクライアントに静的、動的ページを提供できる。
秒以下の時間なら、対話的だと考えることができるだろう。しかし、表示ややり取りに
もっと時間がかかると、ユーザはしびれを切らす。GoogleやAmazonの調査によると、
ページのロードが少しでも遅くなると、トラフィックスは途端に下がるそうだ。

しかし、ファイルのアップロード、イメージのサイズ変更、データベースクエリなど、
なんかの処理に時間がかかって、ほかに手段がなくなったらどうすればよいのだろうか。
待っているものがあるので、同期的なウェブサーバコードの中では打つ手がないのだ。

1台のマシンの複数のタスクをできる限り高速に実行したければ、それらのタスクを独立
したものにすべきだ。そうすれば、遅いタスクがほかのタスクを止めることはなくなる。

この章では、multiprocessingを使って1台のマシンで複数の仕事を同時に実行する方法を
示した。イメージのサイズを変えなければならないなら、ウェブサーバのコードは
ほかの部分とは非同期、並列に実行される独立した専有のイメージサイズ変更プロセスを
呼び出せばよい。複数のサイズ変更プロセスを起動すれば、アプリケーションは水平
スケーリングされる。

ポイントは、それらすべてを相互に調和的に動かすことだ。制御、状態を共有すると、
かならずボトルネックができる。もっと重要なコツは、エラー処理である。並行処理は、
通常の処理よりも難しくなるので、問題を起こすものが増える。そのため、エンドツールで
成功する確率が下がるのだ。

どうれば、こういった複雑な対象をうまくコントロールできるのだろうか。
それは、キューという優れたマルチタスク管理方法から始めることにしよう。
"""
